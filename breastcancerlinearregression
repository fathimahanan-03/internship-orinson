import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, confusion_matrix, ConfusionMatrixDisplay
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target, name="target")

X.fillna(X.mean(), inplace=True)

scaler = MinMaxScaler()
X_normalized = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

train_predictions = model.predict(X_train)
test_predictions = model.predict(X_test)

train_mse = mean_squared_error(y_train, train_predictions)
test_mse = mean_squared_error(y_test, test_predictions)

print(f"Train MSE: {train_mse:.4f}")
print(f"Test MSE: {test_mse:.4f}")

threshold = 0.5
test_predictions_binary = (test_predictions >= threshold).astype(int)

conf_matrix = confusion_matrix(y_test, test_predictions_binary)
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=data.target_names)
disp.plot(cmap="Blues")
plt.title("Confusion Matrix")
plt.show()

feature_names = data.feature_names
user_input_values = []

print("Enter values for the following features:")
for feature in feature_names:
    while True:
        try:
            value = float(input(f"{feature}: "))
            user_input_values.append(value)
            break
        except ValueError:
            print("Invalid input. Please enter a numerical value.")

new_sample = np.array(user_input_values).reshape(1, -1)
new_sample_normalized = scaler.transform(new_sample)
new_prediction = model.predict(new_sample_normalized)
print("Prediction for the new sample:", new_prediction[0])
